/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 at Mon Jul 15 23:54:53 2019. */

#ifndef PB_SERVICE_PB_H_INCLUDED
#define PB_SERVICE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _request_type {
    request_type_echo = 1,
    request_type_add_disk = 2,
    request_type_stat_disk = 3,
    request_type_write_disk = 4,
    request_type_read_disk = 5,
    request_type_sync_disk = 6
} request_type;
#define _request_type_MIN request_type_echo
#define _request_type_MAX request_type_sync_disk
#define _request_type_ARRAYSIZE ((request_type)(request_type_sync_disk+1))

/* Struct definitions */
typedef struct _request_header {
    char request_id[64];
/* @@protoc_insertion_point(struct:request_header) */
} request_header;

typedef struct _response_header {
    char request_id[64];
    char error[64];
/* @@protoc_insertion_point(struct:response_header) */
} response_header;

typedef struct _add_disk_request {
    request_header header;
    char name[64];
    int64_t size;
    int64_t block_size;
/* @@protoc_insertion_point(struct:add_disk_request) */
} add_disk_request;

typedef struct _add_disk_response {
    response_header header;
    char disk_id[64];
/* @@protoc_insertion_point(struct:add_disk_response) */
} add_disk_response;

typedef PB_BYTES_ARRAY_T(65536) echo_request_data_t;
typedef struct _echo_request {
    request_header header;
    echo_request_data_t data;
/* @@protoc_insertion_point(struct:echo_request) */
} echo_request;

typedef PB_BYTES_ARRAY_T(65536) echo_response_data_t;
typedef struct _echo_response {
    response_header header;
    echo_response_data_t data;
/* @@protoc_insertion_point(struct:echo_response) */
} echo_response;

typedef struct _read_disk_request {
    request_header header;
    char disk_id[64];
    int64_t offset;
    int64_t size;
/* @@protoc_insertion_point(struct:read_disk_request) */
} read_disk_request;

typedef PB_BYTES_ARRAY_T(65536) read_disk_response_data_t;
typedef struct _read_disk_response {
    response_header header;
    read_disk_response_data_t data;
/* @@protoc_insertion_point(struct:read_disk_response) */
} read_disk_response;

typedef struct _stat_disk_request {
    request_header header;
    char disk_id[64];
/* @@protoc_insertion_point(struct:stat_disk_request) */
} stat_disk_request;

typedef struct _stat_disk_response {
    response_header header;
    char name[64];
    int64_t size;
    int64_t block_size;
/* @@protoc_insertion_point(struct:stat_disk_response) */
} stat_disk_response;

typedef struct _sync_disk_request {
    request_header header;
    char disk_id[64];
/* @@protoc_insertion_point(struct:sync_disk_request) */
} sync_disk_request;

typedef struct _sync_disk_response {
    response_header header;
/* @@protoc_insertion_point(struct:sync_disk_response) */
} sync_disk_response;

typedef PB_BYTES_ARRAY_T(65536) write_disk_request_data_t;
typedef struct _write_disk_request {
    request_header header;
    char disk_id[64];
    int64_t offset;
    write_disk_request_data_t data;
/* @@protoc_insertion_point(struct:write_disk_request) */
} write_disk_request;

typedef struct _write_disk_response {
    response_header header;
    int64_t bytes_written;
/* @@protoc_insertion_point(struct:write_disk_response) */
} write_disk_response;

/* Default values for struct fields */

/* Initializer values for message structs */
#define request_header_init_default              {""}
#define response_header_init_default             {"", ""}
#define echo_request_init_default                {request_header_init_default, {0, {0}}}
#define echo_response_init_default               {response_header_init_default, {0, {0}}}
#define add_disk_request_init_default            {request_header_init_default, "", 0, 0}
#define add_disk_response_init_default           {response_header_init_default, ""}
#define stat_disk_request_init_default           {request_header_init_default, ""}
#define stat_disk_response_init_default          {response_header_init_default, "", 0, 0}
#define write_disk_request_init_default          {request_header_init_default, "", 0, {0, {0}}}
#define write_disk_response_init_default         {response_header_init_default, 0}
#define read_disk_request_init_default           {request_header_init_default, "", 0, 0}
#define read_disk_response_init_default          {response_header_init_default, {0, {0}}}
#define sync_disk_request_init_default           {request_header_init_default, ""}
#define sync_disk_response_init_default          {response_header_init_default}
#define request_header_init_zero                 {""}
#define response_header_init_zero                {"", ""}
#define echo_request_init_zero                   {request_header_init_zero, {0, {0}}}
#define echo_response_init_zero                  {response_header_init_zero, {0, {0}}}
#define add_disk_request_init_zero               {request_header_init_zero, "", 0, 0}
#define add_disk_response_init_zero              {response_header_init_zero, ""}
#define stat_disk_request_init_zero              {request_header_init_zero, ""}
#define stat_disk_response_init_zero             {response_header_init_zero, "", 0, 0}
#define write_disk_request_init_zero             {request_header_init_zero, "", 0, {0, {0}}}
#define write_disk_response_init_zero            {response_header_init_zero, 0}
#define read_disk_request_init_zero              {request_header_init_zero, "", 0, 0}
#define read_disk_response_init_zero             {response_header_init_zero, {0, {0}}}
#define sync_disk_request_init_zero              {request_header_init_zero, ""}
#define sync_disk_response_init_zero             {response_header_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define request_header_request_id_tag            1
#define response_header_request_id_tag           1
#define response_header_error_tag                2
#define add_disk_request_header_tag              1
#define add_disk_request_name_tag                2
#define add_disk_request_size_tag                3
#define add_disk_request_block_size_tag          4
#define add_disk_response_header_tag             1
#define add_disk_response_disk_id_tag            2
#define echo_request_header_tag                  1
#define echo_request_data_tag                    2
#define echo_response_header_tag                 1
#define echo_response_data_tag                   2
#define read_disk_request_header_tag             1
#define read_disk_request_disk_id_tag            2
#define read_disk_request_offset_tag             3
#define read_disk_request_size_tag               4
#define read_disk_response_header_tag            1
#define read_disk_response_data_tag              3
#define stat_disk_request_header_tag             1
#define stat_disk_request_disk_id_tag            2
#define stat_disk_response_header_tag            1
#define stat_disk_response_name_tag              2
#define stat_disk_response_size_tag              3
#define stat_disk_response_block_size_tag        4
#define sync_disk_request_header_tag             1
#define sync_disk_request_disk_id_tag            2
#define sync_disk_response_header_tag            1
#define write_disk_request_header_tag            1
#define write_disk_request_disk_id_tag           2
#define write_disk_request_offset_tag            3
#define write_disk_request_data_tag              4
#define write_disk_response_header_tag           1
#define write_disk_response_bytes_written_tag    2

/* Struct field encoding specification for nanopb */
extern const pb_field_t request_header_fields[2];
extern const pb_field_t response_header_fields[3];
extern const pb_field_t echo_request_fields[3];
extern const pb_field_t echo_response_fields[3];
extern const pb_field_t add_disk_request_fields[5];
extern const pb_field_t add_disk_response_fields[3];
extern const pb_field_t stat_disk_request_fields[3];
extern const pb_field_t stat_disk_response_fields[5];
extern const pb_field_t write_disk_request_fields[5];
extern const pb_field_t write_disk_response_fields[3];
extern const pb_field_t read_disk_request_fields[5];
extern const pb_field_t read_disk_response_fields[3];
extern const pb_field_t sync_disk_request_fields[3];
extern const pb_field_t sync_disk_response_fields[2];

/* Maximum encoded size of messages (where known) */
#define request_header_size                      66
#define response_header_size                     132
#define echo_request_size                        65608
#define echo_response_size                       65675
#define add_disk_request_size                    156
#define add_disk_response_size                   201
#define stat_disk_request_size                   134
#define stat_disk_response_size                  223
#define write_disk_request_size                  65685
#define write_disk_response_size                 146
#define read_disk_request_size                   156
#define read_disk_response_size                  65675
#define sync_disk_request_size                   134
#define sync_disk_response_size                  135

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SERVICE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
